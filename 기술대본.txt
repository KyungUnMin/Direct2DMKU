몬스터 이동 A*
   A*시 느려지는 공간
몬스터의 겹침 문제
Z버퍼 사용 이유

FSM구조
FSM 복제를 위한 툴(이를 이용해 한마리당 n개의 State를 가진 몬스터들을 m개 만들어낼 수 있었다)
이벤트 영역 접근 시 카메라 고정 -> 카메라의 FSM 소개
에너미스포너
   모든 몬스터들은 EnemySpawner클래스를 통해 생성된다.
   플레이어가 필드의 모든 몬스터들을 다 제거하면
   사전에 등록된 함수포인터가 호출된다.
   SchoolEntry스테이지에서는 닫혀있던 문이 열리고,
   각 보스스테이지에서는 다음 스테이지로 전환되는 UI가 생성된다.

레벨업시 옵저버 패턴
NPC대화시 시간이 정지되는 기능
   매 프레임 델타타임을 만들어내는 클래스(GameEngineTime)가 존재한다.
   일반적인 객체들은 메인 GameEngineTime이 만들어낸 델타타임을 인자로 받아 Update가 실행되는데,
   플레이어가 NPC와 대화를 시작하면 메인 GameEngineTime의 타임 스케일은 0이 되고,
   NPC와 대화 UI만 다른 GameEngineTime가 만들어내는 델타타임으로 Update가 실행된다.

스킬 상점에서 플레이어 재활용
   필드의 플레이어를 상속받아 재활용하고 키입력만 막아두었다.

보스 UI에 사용된 쉐이더
   픽셀 쉐이더에서 노이즈 값을 만들고
   상수버퍼로 들어온 값보다 노이즈 값이 낮다면 해당 픽셀을 출력하지 않는 방식으로 만듦

오프닝 영상 DirectShow 라이브러리 사용,
   게임 시작시 나오는 오프닝에서는 사용했지만,
   랜더링 파이프라인이 시작되고 난 이후에는, 동영상의 소리만 나오고 영상은 나오지 않았다.
   그래서 보스 컷신에서는 스프라이트 애니메이션을 이용해 컷신을 만들었다.
사운드 라이브러리로 Fmod를 선택한 이유
   WinAPI의 PlaySound는 다양한 사운드 확장자를 지원하지 않는다.
   WinAPI의 PlaySound는 Fmod만큼 다양한 기능들이 지원되지 않는다.(피치, 사운드 크기, 사운드 정지 등)
   Wwise보다 사용하기 쉽다. Wwise는 좀 더 전문적인 라이브러리로 판단했다.


------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------


1. 몬스터 이동 [시간에 따른 상태값 변경으로 몬스터의 대형 이동]
      A* : 맵 지형 문제로 길찾기를 써야했음, 10개 가량의 모작 프로젝트를 조사한 후에 게임에 가장 대중적인 길찾기 알고리즘을 적용했음
     몬스터 겹침 문제 : 길찾기는 적용했으나 이동시 다수의 몬스터가 겹쳐서 이동함 그래서 어색했음, 이를 위해 주변에 다른 몬스터가 존재하면 Walk상태에서 idle 상태로 변경시킴, 그랬더니 몬스터들이 자기들끼리 서로 낑겨서 못 움직이는 현상이 나옴. 이를 개선하기 위해 _____하는 방식으로 해결할 수 있었음

2. Fsm구조[파일 복사기 툴을 이용한 다량의 몬스터파일 복제]
     구조 : Fsm의 구조는 다음과 같이 만들었음(그림과 함께 소개), 참고로 카메라도 이런 Fsm을 통해 만듬

     툴 : 그러나 이런 방식은 다수의 몬스터를 만들어내기에는 불편한 점이 많았다(겹치는 상태를 그림으로 표현, 겹치는 상태에서도 텍스처는 직접 지정해줘야 함), 그래서 이를 위해 예시 파일을 조사하여 특정 문자를 다른 문자로 바꿔서 복사해주는 파일 복사기 툴을 만들었음. 이를 이용해 L기간동안 평균 n개의 상태값을 가진 몬스터를 m개 만들 수 있었음

3. 에너미 스포너[올킬 콜백을 이용한 다음 스테이지 이동 구현]
이 게임에는 모든 몬스터를 해치우면 다음 스테이지로 이동할 수 있는 문의 잠금이 풀리거나, 보스 몬스터를 해치우면 다음 스테이지로 이동하는 Ui가 생성됨
이를 구현허기 위해 에너미 스포너를 만들고 이 객체에서 몬스터들을 관리했음
모든 몬스터는 에너미스포너를 통해 생성되고, 현재 스테이지에 있는 모든 몬스터가 제거되면 사전에 콜백을 호출시키는 것으로 문제를 해결함

4. 레벨업[레벨업 콜백으로 __구현]


------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------


DirectX 11을 이용해서 리버시티 걸즈를 모작한 민경운입니다.
이 영상의 내용은 위와 같이 구성하였습니다.

[몬스터 이동 겹침 문제 해결하기 위한 랜덤 대기 시간을 도입]
원작 게임에서는 장애물이나 직선 이동이 불가능한 스테이지가 있었습니다.
이런 문제를 해결하기 위해 다른 사람들이 만든 10개가량의 모작 프로젝트를 조사하고, 이러한 경험을 토대로 A* 길 찾기 알고리즘을 적용했습니다.
그러나 이 과정에서 몬스터들이 겹쳐서 이동하는 문제가 발생했습니다.
이를 해결하기 위해 주변에 다른 몬스터들이 존재할 경우 랜덤한 시간 동안 제자리에 대기하도록 조치를 취했습니다.

[FSM 구조의 불편함을 극복하기 위한 파일 복사기 툴 개발]
(그림: FSM의 구조)
FSM의 구조는 위와 같이 계층구조로 만들었습니다
그러나 이러한 계층 구조 방식은 몬스터처럼 다수의 오브젝트의 FSM을 만들어내기에는 불편한 점이 많았습니다.
이에 대한 해결책으로, 예시 파일을 조사하여 특정 문자를 다른 문자로 바꿔주는 파일 복사기 툴을 개발하였습니다.
이 도구를 사용하여, 2주 동안 평균적으로 12개의 상태 값을 가진 일반 몬스터를 8마리 만들 수 있었습니다.
이를 통해 몬스터 생성 프로세스를 효율적으로 관리하고 개선할 수 있었습니다.

[플레이어 코드 재활용을 통한 스킬 상점 개선]
스킬 상점으로 이동하면 구매할 스킬을 미리 확인할 수 있는 플레이어가 존재합니다.
이로 인해 새로운 스킬을 개발할 때마다 스킬 상점과 전투 스테이지의 두 가지 종류의 플레이어 코드를 모두 업데이트해야 하는 문제가 발생합니다.
이 문제를 개선하기 위해, 상점의 플레이어는 전투용 플레이어를 상속받고, 키 입력을 막아두어 코드 재활용을 실현하였습니다.

[게임에서의 동영상 구현과 보스 소개 컷씬의 기술적 해결]
이 게임에서는 오프닝 동영상이 재생되고, 보스 몬스터와의 전투 직전에는 보스 몬스터를 소개하는 컷신 영상이 재생됩니다.
이를 구현하기 위해 동영상 출력과 관련된 라이브러리인 DirectShow, OpenCV, Media Foundation에 대한 Example 코드를 조사하였습니다.
결과적으로 라이브러리를 사용하여 게임의 오프닝 영상을 출력할 수 있었지만, DirectShow는 Direct의 렌더링 파이프라인이 동작하는 중간에는 화면 출력이 어려웠습니다.
이 문제를 극복하기 위해 보스의 컷신 영상에는 동영상 라이브러리를 사용하는 대신 스프라이트 애니메이션을 재생시키는 방식으로 구현하였습니다.

[쉐이더 기술을 통한 UI 효과 구현과 DirectX 랜더링 파이프라인 이해]
보스 몬스터와 전투 직전에 나오는 UI는 메시와 상관없이 물체가 지워집니다.
이런 효과를 구현하기 위해 유니티로 배우는 쉐이더 스타트업과 유튜브의 강의를 참고하여 쉐이더 기술을 공부했습니다.
이렇게 쉐이더 파일을 직접 작성하는 경험은 DirectX의 렌더링 파이프라인을 이해하는 데도 큰 도움을 주었습니다.
앞으로의 게임 개발에 이러한 기술적 지식을 활용할 수 있을 것으로 기대합니다.

[마무리]
이 프로젝트를 진행하면서 A* 알고리즘, 동영상 출력 라이브러리, 쉐이더 작성 등 이전에 모르던 분야에 도전하며 자신감을 얻었습니다.
이러한 경험은 앞으로의 도전에 대한 자신감을 높여주었고, 끊임없이 더 나은 개발자로 성장하고자 하는 다짐을 하게 되었습니다.
앞으로도 열심히 노력하여 더 큰 성과를 이루겠습니다.



